let gulp = require('gulp');
let autoprefixer = require('gulp-autoprefixer');
let browserSync = require('browser-sync').create();
let htmlmin = require('gulp-htmlmin');
let sass = require('gulp-sass')(require('sass'));
let sourcemaps = require('gulp-sourcemaps');

gulp.task('build-html', function (done) {
  gulp.src('source/html/*.html')
    .pipe(htmlmin({
      collapseBooleanAttributes: true,
      collapseWhitespace: true,
      conservativeCollapse: true, // required for browser-sync to work
      decodeEntities: true,
      includeAutoGeneratedTags: false,
      minifyCSS: true,
      minifyJS: true,
      processConditionalComments: true,
      processScripts: ['text/html'],
      quoteCharacter: '"',
      removeComments: true,
      removeEmptyAttributes: true,
      removeRedundantAttributes: true,
      removeScriptTypeAttributes: true,
      removeStyleLinkTypeAttributes: true,
      useShortDoctype: true
    }))
    .pipe(gulp.dest('public'));

  done();
});

gulp.task('build-css', function (done) {
  gulp.src('source/scss/*.scss')
    .pipe(sourcemaps.init())
    .pipe(sass({
      outputStyle: 'compressed'
    }).on('error', sass.logError))
    .pipe(autoprefixer())
    .pipe(sourcemaps.write('./sourcemaps'))
    .pipe(gulp.dest('public/assets/stylesheets'));

  done();
});

gulp.task('sync-html', gulp.series('build-html', function (done) {
  browserSync.reload();

  done();
}));

gulp.task('sync-css', gulp.series('build-css', function (done) {
  browserSync.reload();

  done();
}));

gulp.task('watch', function (done) {
  browserSync.init({
    server: {
      baseDir: 'public'
    }
  });

  gulp.watch('source/scss/*.scss', gulp.series('sync-css'));
  gulp.watch('source/html/*.html', gulp.series('sync-html'));

  done();
});

gulp.task('build', gulp.series('build-html', 'build-css'));
gulp.task('default', gulp.series('build', 'watch'));
